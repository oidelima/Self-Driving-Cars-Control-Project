clear
global n input_cost
setGlobaln(100)
niter = 3;
subdivision_num = 10;
gradient_precision = [0.05, 1]

input_cost = 0.1;

z0 = repmat([287, 5, -176, 0, 2, 0], n, 1);
u0 = repmat([0 0], n-1, 1);

x0 = encodeColocationVector(z0(:,1), z0(:,2), z0(:,3), z0(:,4), z0(:,5), z0(:,6), u0(:,1), u0(:,2));

[z_out, breakpts] = generateMultiplePart1(n, niter, subdivision_num);

load TestTrack.mat

%sol1 = forwardIntegrateControlInput(ROB535ControlsProjectpart1input);

% Testing inequality constraint fitter
rng(0,'twister');
xlim1 = 200;
xlim2 = 1500;
ylim1 = -200;
ylim2 = 825;
%xlim1 = 600;
%xlim2 = 1100;
%ylim1 = 300;
%ylim2 = 600;
%passmap = g2 < 0;
%failmap = g2 > 0;
%passpoints = [passmap .* rx2; passmap .* ry2];
%passpoints(:,~any(passpoints))=[];
%failpoints = [failmap .* rx2; failmap .* ry2];
%failpoints(:,~any(failpoints))=[];
%plot(passpoints(1,:), passpoints(2,:), '.b')
hold on
%plot(failpoints(1,:), failpoints(2,:), '.r')
%For 2d plotting:
%s = surf(rx, ry, reshape(g2, size(rx)));
%s.EdgeColor = 'none';

[x, u, y, v, psi, r, delta, Fx] = decodeColocationVector(z_out);
plot(x(1),y(1), 'ob')
plot(x(2:end),y(2:end), '.-b')
plot(breakpts(:,1),breakpts(:,3), 'o-r')
%{
for i = -2:10
    intermediate_lines = (i*TestTrack.bl + (8-i)*TestTrack.br)/8;
    plot(intermediate_lines(1,:), intermediate_lines(2,:), '.b')
end
%}
plot(TestTrack.cline(1,:), TestTrack.cline(2,:), '--k')
plot(TestTrack.bl(1,:), TestTrack.bl(2,:), 'k')
plot(TestTrack.br(1,:), TestTrack.br(2,:), 'k')
%plot(sol1(:,1), sol1(:,3), 'b')
xlim([xlim1,xlim2])
ylim([ylim1,ylim2])
%view(0,90)