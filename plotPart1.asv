%generatePart1

load TestTrack.mat

%sol1 = forwardIntegrateControlInput(ROB535ControlsProjectpart1input);

% Testing inequality constraint fitter
rng(0,'twister');
xlim1 = 200;
xlim2 = 1500;
rx = (xlim2-xlim1).*rand(10000,1) + xlim1;
ylim1 = -200;
ylim2 = 825;
ry = (ylim2-ylim1).*rand(10000,1) + ylim1;
% b = fitInequalConstraintToPoints(TestTrack.bl, 3)
% g1 = 200^2 - (rx - 900).^2 - (ry - 300).^2;
%g2 = 
%passmap = g2 < 0;
%failmap = g2 > 0;
% t = -.36;
% R = [cos(t), -sin(t);sin(t), cos(t)];
% new_bl = R*TestTrack.bl;
% new_br = R*TestTrack.br;
% p = polyfit(new_bl(1,1:50), new_bl(2,1:50), 4);
% linx = 200:0.1:1500;
% liny = polyval(p,linx);
% plot(linx,liny)
%plot(rx .* passmap, ry .* passmap, '.b')
hold on
%plot(rx .* failmap, ry .* failmap, '.r')

plot(TestTrack.cline(1,:), TestTrack.cline(2,:), '--k')
plot(TestTrack.bl(1,:), TestTrack.bl(2,:), '.k')
plot(TestTrack.br(1,:), TestTrack.br(2,:), '.k')
%plot(sol1(:,1), sol1(:,3), 'b')
xlim([200,1500])
ylim([-200, 825])

function [Lnormals, Rnormals] = calcNormals(leftBound, rightBound)
    n = size(leftBound, 2); % 246
    dLeft = leftBound(:,2:n) - leftBound(:,1:n-1);
    dRight = rightBound(:,2:n) - rightBound(:,1:n-1);
    Lnormals = [0, -1; 1, 0] * (dLeft ./ vecnorm(dLeft));
    Rnormals = [0, 1; -1, 0] * (dRight ./ vecnorm(dRight));
end

function g = inequal(pos, leftBound, rightBound, leftNormals, rightNormals)
    [Idleft, Dleft] = knnsearch(leftBound', pos');
	[Idright, Dright] = knnsearch(rightBound', pos');
    
    rightCorr = rightBound(:, Idright);
    leftCorr = rightBound(:, Idleft);
    
    rightVectors = pos - rightCorr;
    leftVectors = pos - leftCorr;
    
    righ
end